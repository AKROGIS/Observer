//
//  Warnings.xcconfig
//
//  Edited by Regan Sarwas:
//     National Park Service - Alaska Region GIS Team
//     Update for 8.3 (2017-04-13)

//  XcodeWarnings by Jon Reid, http://qualitycoding.org/about/
//  Source: https://github.com/jonreid/XcodeWarnings

// Apple LLVM 8.0 - Preprocessing
ENABLE_STRICT_OBJC_MSGSEND = YES

// Apple LLVM 8.0 - Warning Policies
//GCC_TREAT_WARNINGS_AS_ERRORS = YES

// Apple LLVM 8.0 - Warnings - All languages
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
//ArcGIS Header files have many documentation errors  (comment out the following when precompiling those headers)
//CLANG_WARN_DOCUMENTATION_COMMENTS = YES
CLANG_WARN_EMPTY_BODY = YES
GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES
GCC_WARN_SHADOW = YES
CLANG_WARN_BOOL_CONVERSION = YES
CLANG_WARN_CONSTANT_CONVERSION = YES
GCC_WARN_64_TO_32_BIT_CONVERSION = YES
CLANG_WARN_ENUM_CONVERSION = YES
CLANG_WARN_INT_CONVERSION = YES
CLANG_WARN_IMPLICIT_SIGN_CONVERSION = YES
CLANG_WARN_INFINITE_RECURSION = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR
GCC_WARN_MISSING_PARENTHESES = YES
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES
//ArcGIS Header files have missing many last newlines (comment out the following when precompiling those headers)
//GCC_WARN_ABOUT_MISSING_NEWLINE = YES
CLANG_WARN_ASSIGN_ENUM = YES
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES
GCC_WARN_SIGN_COMPARE = YES
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES
GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS = YES
GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES  // -Wformat == -Wformat=1
                                          // -Wformat=2 adds extra printf format checks (See: http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html)
// OTHER_CFLAGS = -Wformat=2
GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE
GCC_WARN_UNKNOWN_PRAGMAS = YES
CLANG_WARN_UNREACHABLE_CODE = YES_AGGRESSIVE
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES
// Warn whenever a function parameter is unused aside from its declaration.
// This is turned off because IBActions, delegates, and callbacks often provide parameters (i.e. sender) that are not needed
//GCC_WARN_UNUSED_PARAMETER = YES
GCC_WARN_UNUSED_VALUE = YES
GCC_WARN_UNUSED_VARIABLE = YES

// Apple LLVM 8.0 - Warnings - C++
CLANG_WARN__EXIT_TIME_DESTRUCTORS = YES
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
CLANG_WARN_SUSPICIOUS_MOVE = YES
GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = YES
CLANG_WARN_CXX0X_EXTENSIONS = YES

// Apple LLVM 8.0 - Warnings - Objective-C
CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES
// Warn about implicit property synthesis.
// This is a useful compiler feature (since Xcode 4.4). The warning is for backwards compatibility
//CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS = YES
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
GCC_WARN_STRICT_SELECTOR_MATCH = YES
GCC_WARN_UNDECLARED_SELECTOR = YES
CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR

// Apple LLVM 8.0 - Warnings - Objective-C and ARC
CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES
CLANG_WARN__ARC_BRIDGE_CAST_NONARC = YES

// Data Model Compiler (MOMC) - Warnings
MOMC_NO_WARNINGS = NO;
MOMC_NO_INVERSE_RELATIONSHIP_WARNINGS = NO;
MOMC_NO_DELETE_RULE_WARNINGS = NO;
MOMC_NO_MAX_PROPERTY_COUNT_WARNINGS = NO;
MOMC_SUPPRESS_INVERSE_TRANSIENT_ERROR = NO;

// Static Analyzer - Analysis Policy
RUN_CLANG_STATIC_ANALYZER = YES
CLANG_STATIC_ANALYZER_MODE_ON_ANALYZE_ACTION = Deep
CLANG_STATIC_ANALYZER_MODE = Deep

// Static Analyzer - Generic Issues
CLANG_ANALYZER_DEADCODE_DEADSTORES = YES
CLANG_ANALYZER_MEMORY_MANAGEMENT = YES
CLANG_ANALYZER_NONNULL = YES

// Static Analyzer - Apple API Issues
CLANG_ANALYZER_OBJC_NSCFERROR = YES
// Check for non-localized text presented to the user.
//CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES
CLANG_ANALYZER_LOCALIZABILITY_EMPTY_CONTEXT = YES
CLANG_ANALYZER_OBJC_COLLECTIONS = YES
CLANG_ANALYZER_GCD = YES
CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE

// Static Analyzer - Checks - Objective-C
CLANG_ANALYZER_OBJC_ATSYNC = YES
CLANG_ANALYZER_OBJC_DEALLOC = YES
CLANG_ANALYZER_OBJC_INCOMP_METHOD_TYPES = YES
CLANG_ANALYZER_OBJC_GENERICS = YES
CLANG_ANALYZER_OBJC_UNUSED_IVARS = YES
CLANG_ANALYZER_OBJC_SELF_INIT = YES
CLANG_ANALYZER_OBJC_RETAIN_COUNT = YES

// Static Analyzer - Checks - Security
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_KEYCHAIN_API = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK = YES



// Another option that turns on many more warnings that should be investigated.
// -Weverything - This turns on all the visible Xcode warnings, along with other Clang compiler warnings that Apple has not made visible in the Xcode project settings.
// -Weverything overrides settings above, so we need to turn off warnings we do not want explicitly
OTHER_CFLAGS = -Weverything -Wno-unused-parameter -Wno-objc-missing-property-synthesis -Wno-direct-ivar-access -Wno-auto-import -Wno-documentation -Wno-documentation-unknown-command -Wno-objc-interface-ivars -Wno-super-class-method-mismatch -Wno-overriding-method-mismatch

//-Wno-unused-parameter
//warning: unused parameter A
// Warn whenever a function parameter is unused aside from its declaration.
// This is turned off because IBActions, delegates, and callbacks often provide parameters (i.e. sender) that are not needed

//-Wno-objc-missing-property-synthesis
//warning: auto property synthesis is synthesizing property not explicitly synthesized
// Warn about implicit property synthesis.
// This is a useful compiler feature (since Xcode 4.4). The warning is for backwards compatibility

//-Wno-direct-ivar-access
//warning: instance variable A is being directly accessed
// 139 Issues in my code
// These are OK, typically lazy initialization of ivars; almost all cases are setting the ivar.
// Ignore this warning.

//-Wno-auto-import
//warning: treating #import as an import of module ‘B‘
//Replacing #import <UIKit/UIKit.h> with @import UIKit is nice but not required.
//It also generates a lot more errors, saying modules are not enabled, but they are.  Turn off this warning.

//-Wno-newline-eof
//warning: no newline at end of file
//many ArcGIS header files are missing a newline at the end of the file.

//-Wno-documentation
//lots of different warnings
//ArcGIS Header files have many (63) documentation errors

//-Wno-documentation-unknown-command
//warning: unknown command tag name
//11 issues in AGSPoint.h and AGSMapView.h

//-Wno-objc-interface-ivars
//warning: declaration of instance variables in the interface is deprecated
//88 Issues in Quick dialog, ZipKit, and ArcGIS

//-Wno-overriding-method-mismatch
//warning: conflicting parameter types in declaration of A: B vs C
//2 issues in AGSGDBFeatureTable.h;; 1 issue in QuickDialog/QBadgeElement.h

//-Wno-super-class-method-mismatch
//warning: Method parameter type does not match super class method parameter type
//2 issues in AGSGDBFeatureTable.h


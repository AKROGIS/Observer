//
//  Warnings.xcconfig
//
//  Edited by Regan Sarwas:
//     National Park Service - Alaska Region GIS Team
//  Created by Steven Fisher:
//      http://tewha.net/2010/11/xcode-warnings/
//  See also:
//      http://boredzo.org/blog/archives/2009-11-07/warnings
//


CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN__EXIT_TIME_DESTRUCTORS = YES
CLANG_WARN_BOOL_CONVERSION = YES
CLANG_WARN_CONSTANT_CONVERSION = YES
CLANG_WARN_CXX0X_EXTENSIONS = YES
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
CLANG_WARN_DOCUMENTATION_COMMENTS = YES
CLANG_WARN_EMPTY_BODY = YES
CLANG_WARN_ENUM_CONVERSION = YES
CLANG_WARN_IMPLICIT_SIGN_CONVERSION = YES
CLANG_WARN_INT_CONVERSION = YES
CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE = YES
CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES

// Warn about implicit property synthesis.
// Property synthesis is now a compiler feature, and the warning is obsolete
CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS = NO

// Warn about sending messages to a reference that may evaporate mid message.
// See: http://stackoverflow.com/questions/11899134/how-to-properly-address-weak-receiver-may-be-unpredictably-null-in-arc-mode
// Solution is to copy to a local (or strong reference) before sending it a message
//CLANG_WARN_OBJC_RECEIVER_WEAK = YES  //-Wreceiver-is-weak

// Warn about repeatedly using a weak reference without assigning the weak reference to a strong reference.
//CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES  //-Warc-repeated-use-of-weak

CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES

CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES

GCC_WARN_64_TO_32_BIT_CONVERSION = YES
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = YES
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES
GCC_WARN_ABOUT_MISSING_NEWLINE = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_MISSING_PARENTHESES = YES
GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR = YES
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES
GCC_WARN_PEDANTIC = YES
GCC_WARN_SHADOW = YES
GCC_WARN_SIGN_COMPARE = YES
GCC_WARN_STRICT_SELECTOR_MATCH = YES
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES  // -Wformat == -Wformat=1
GCC_WARN_UNDECLARED_SELECTOR = YES
GCC_WARN_UNINITIALIZED_AUTOS = YES
GCC_WARN_UNKNOWN_PRAGMAS = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES

// Warn whenever a function parameter is unused aside from its declaration.
// This is turned off because IBActions and system blocks provide parameters (i.e. sender) that are often unused
GCC_WARN_UNUSED_PARAMETER = NO

GCC_WARN_UNUSED_VALUE = YES
GCC_WARN_UNUSED_VARIABLE = YES

GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS = YES
GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES
GCC_TREAT_WARNINGS_AS_ERRORS = YES

MOMC_NO_INVERSE_RELATIONSHIP_WARNINGS = YES
MOMC_NO_MAX_PROPERTY_COUNT_WARNINGS = YES

// -Wextra is duplicate of many of the warnings explicitly set, but just in case...
// -Wextra turns on -Wunused-parameter, so we turn that off explicitly
// -Wformat=2 adds extra printf format checks (See: http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html)
OTHER_CFLAGS = -Wextra -Wno-unused-parameter -Wformat=2

RUN_CLANG_STATIC_ANALYZER = YES

